openapi: 3.0.3
info:
  description: |
    [OpenID Spec](https://openid.net/specs/openid-sse-framework-1_0.html#management)

    HTTP API to be implemented by Event Transmitters. This API can be used by
    Event Receivers to query and update the Event Stream configuration and
    status, to add and remove subjects, and to trigger verification.
  license:
    name: MIT
  title: Stream Management API for OpenID Shared Security Events
  version: 1.0.0
servers:
- url: /
tags:
- description: |-
    [Spec](https://openid.net/specs/openid-sse-framework-1_0.html#management)
    Stream Management endpoints provided by an Event Transmitter so that Event Transmitters may configure Event Streams.
  name: StreamManagement
- description: |-
    Additional endpoints provided by an Event Transmitter. These are not needed during Stream Managment, but are used
    by Event Receivers for event processing.
  name: Transmitter
- description: |-
    Endpoints that are NOT a part of the [Open ID Spec](https://openid.net/specs/openid-sse-framework-1_0.html), but
    that exist for convenience within this demo.
  name: OutOfBand
paths:
  /.well-known/sse-configuration:
    get:
      description: Return Transmitter Configuration information.
      operationId: _well_known_ssf_configuration_get
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransmitterConfiguration'
          description: |
            A set of Claims about the Transmitter's configuration,
            including all necessary endpoints and public key location information
      summary: Transmitter Configuration Request (without path)
      tags:
      - StreamManagement
      x-accepts: application/json
      x-tags:
      - tag: StreamManagement
  /.well-known/sse-configuration/{issuer}:
    get:
      description: Return Transmitter Configuration information (with support for
        specifying an issuer).
      operationId: _well_known_ssf_configuration_issuer_get
      parameters:
      - description: |
          Using path components enables supporting multiple issuers per host.
          This is required in some multi-tenant hosting configurations.
          This use of .well-known is for supporting multiple issuers per host;
          unlike its use in [RFC5785](https://openid.net/specs/openid-sse-framework-1_0.html#RFC5785),
          it does not provide general information about the host.
        example: tenant-a
        explode: false
        in: path
        name: issuer
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransmitterConfiguration'
          description: |
            A set of Claims about the Transmitter's configuration,
            including all necessary endpoints and public key location information.
      summary: Transmitter Configuration Request (with path)
      tags:
      - StreamManagement
      x-accepts: application/json
      x-tags:
      - tag: StreamManagement
  /stream:
    delete:
      description: |-
        An Event Receiver removes the configuration of a stream by making an HTTP DELETE request to the Configuration
        Endpoint. On receiving a request the Event Transmitter responds with a 200 OK response if the configuration was
        successfully removed.
      responses:
        "200":
          description: |-
            On receiving a request the Event Transmitter responds with a 200 OK response if the configuration was
            successfully removed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization failed or is missing
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The Event Receiver is not allowed to update the stream configuration.
      security:
      - BearerAuth: []
      summary: Request to remove the configuration of an event stream
      tags:
      - StreamManagement
      x-accepts: application/json
      x-tags:
      - tag: StreamManagement
    get:
      description: |-
        [Spec](https://openid.net/specs/openid-sse-framework-1_0.html#reading-a-streams-configuration)

        An Event Receiver gets the current configuration of a stream by making an HTTP GET request to the Configuration
        Endpoint. On receiving a valid request the Event Transmitter responds with a 200 OK response containing a JSON
        representation of the stream’s configuration in the body.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamConfiguration'
          description: The Event Stream's configuration
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request body cannot be parsed or the request is otherwise invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The Event Receiver is not allowed to read the stream configuration.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: There is no Event Stream configured for this Event Receiver.
      security:
      - BearerAuth: []
      summary: Request to retrieve the configuration of an event stream
      tags:
      - StreamManagement
      x-accepts: application/json
      x-tags:
      - tag: StreamManagement
    post:
      description: |-
        [Spec](https://openid.net/specs/openid-sse-framework-1_0.html#updating-a-streams-configuration)

        An Event Receiver updates the current configuration of a stream by making an HTTP POST request to the Configuration
        Endpoint. The POST body contains a JSON representation of the updated configuration. On receiving a valid request
        the Event Transmitter responds with a 200 OK response containing a JSON representation of the updated stream
        configuration in the body.

        The full set of editable properties must be present in the POST body, not only the ones that are specifically
        intended to be changed. Missing properties SHOULD be interpreted as requested to be deleted. Event Receivers should
        read the configuration first, modify the JSON representation, then make an update request.

        Properties that cannot be updated MAY be present, but they MUST match the expected value.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StreamConfiguration'
        description: Request parameters
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamConfiguration'
          description: The Event Stream's updated configuration
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |-
            The update request has been accepted, but not processed.
            Receiver MAY try the same request later in order to get processing result.

            If a Receiver makes a request to update the stream to enable it for a specific Subject, and the Transmitter is
            unable to decide whether or not to complete the request, then the Transmitter MUST respond with a 202 status
            code.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request body cannot be parsed or the request is otherwise invalid
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization failed or is missing
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The Event Receiver is not allowed to update the stream configuration.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: There is no Event Stream configured for this Event Receiver.
      security:
      - BearerAuth: []
      summary: Request to update the configuration of an event stream
      tags:
      - StreamManagement
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: StreamManagement
  /status:
    get:
      description: |-
        [Spec](https://openid.net/specs/openid-sse-framework-1_0.html#reading-a-streams-status)

        An Event Receiver checks the current status of an event stream by making an
        HTTP GET request to the stream’s Status Endpoint.
      operationId: get_status
      parameters:
      - description: |-
          OPTIONAL. The subject for which the stream status is requested.
          Content is a string-encoded json representation of a Subject
          (see Subject schema)
        explode: true
        in: query
        name: subject
        required: false
        schema:
          example: "{\"user\":{\"format\":\"email\",\"email\":\"reginold@popular-app.com\"\
            }}"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamStatus'
          description: |-
            On receiving a valid request the Event Transmitter responds with a 200
            OK response containing a JSON object with an attribute status
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization failed or is missing
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The Event Receiver is not allowed to read this stream's status.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |-
            There is no Event Stream configured for this Event Receiver,
            or the Subject specified is invalid or
            the Receiver is not authorized to get status for the specified Subject.
      security:
      - BearerAuth: []
      summary: Request to get the status of an Event Stream
      tags:
      - StreamManagement
      x-accepts: application/json
      x-tags:
      - tag: StreamManagement
    post:
      description: |-
        [Spec](https://openid.net/specs/openid-sse-framework-1_0-ID1.html#updating-a-streams-status)

        An Event Receiver updates the current status of a stream by making an HTTP
        POST request to the Status Endpoint.
      operationId: update_status
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStreamStatus'
        description: Request parameters
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateStreamStatus'
          description: Event Stream status successfully updated
        "202":
          description: |-
            The update request has been accepted, but not processed.
            Receiver MAY try the same request later in order to get processing result.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request body cannot be parsed or the request is otherwise invalid
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization failed or is missing
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The Event Receiver is not allowed to update the stream status.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |-
            There is no Event Stream configured for this Event Receiver,
            or an invalid Subject is specified.
      security:
      - BearerAuth: []
      summary: Request to update an Event Stream's status
      tags:
      - StreamManagement
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: StreamManagement
  /add-subject:
    post:
      description: |-
        [Spec](https://openid.net/specs/openid-sse-framework-1_0.html#adding-a-subject-to-a-stream)

        Event Receivers can send requests to an Event Transmitter's Add Subject endpoint to add a subject to an Event Stream.
      operationId: add_subject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddSubjectParameters'
        description: Request parameters
        required: true
      responses:
        "200":
          description: |-
            On a successful response, the Event Transmitter responds with an empty 200 OK response.
            The Event Transmitter MAY choose to silently ignore the request, for example if the subject has previously
            indicated to the transmitter that they do not want events to be transmitted to the Event Receiver.
            In this case, the transmitter MAY return an empty 200 OK response or an appropriate error code.
            See [Security Considerations](https://openid.net/specs/openid-sse-framework-1_0.html#management-sec).
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request body cannot be parsed or the request is otherwise invalid
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization failed or is missing
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The Event Receiver is not allowed to add this particular subject,\
            \ or not allowed to add in general."
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |-
            The subject is not recognized by the Event Transmitter,
            the Event Transmitter may chose to stay silent in this case and respond with 200.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Event Receiver is sending too many requests
      security:
      - BearerAuth: []
      summary: Request to add a subject to an Event Stream
      tags:
      - StreamManagement
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: StreamManagement
  /remove-subject:
    post:
      description: |-
        [Spec](https://openid.net/specs/openid-sse-framework-1_0.html#removing-a-subject)

        Event Receivers can send requests to an Event Transmitter's Remove Subject endpoint to remove a subject from an Event Stream.
      operationId: remove_subject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveSubjectParameters'
        description: Request parameters
        required: true
      responses:
        "204":
          description: "On a successful response, the Event Transmitter responds with\
            \ a 204 No Content response."
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request body cannot be parsed or the request is otherwise invalid
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization failed or is missing
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The Event Receiver is not allowed to remove this particular\
            \ subject, or not allowed to remove in general."
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |-
            The subject is not recognized by the Event Transmitter,
            the Event Transmitter may chose to stay silent in this case and respond with 204.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Event Receiver is sending too many requests
      security:
      - BearerAuth: []
      summary: Request to add a subject to an Event Stream
      tags:
      - StreamManagement
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: StreamManagement
  /verification:
    post:
      operationId: verification_request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerificationParameters'
        description: Optional request parameters
        required: false
      responses:
        "204":
          description: |
            Request for verification event was successfully received. A
            successful response from a POST to the Verification Endpoint does
            not indicate that the verification event was transmitted
            successfully, only that the Event Transmitter has transmitted the
            event or will do so at some point in the future.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request body cannot be parsed or the request is otherwise invalid
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Authorization failed or is missing
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Event Receiver is sending too many requests
      security:
      - BearerAuth: []
      summary: Request that a verification event be sent over an Event Stream
      tags:
      - StreamManagement
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: StreamManagement
  /jwks.json:
    get:
      description: "[Spec](https://datatracker.ietf.org/doc/html/rfc7517)"
      operationId: jwks_json
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                  keys:
                  - alg: ES256
                    crv: P-256
                    kid: transmitter-ES256-001
                    kty: EC
                    x: Js-Hzhls17UL1JI2EL0AB6Ta2B282me2niBGc0s1-Lo
                    "y": PCsSWYCixwZgEyYKbGDFpzaooP6_Z-4CEfV62cbNBQw
                type: object
          description: "[Spec](https://www.rfc-editor.org/rfc/rfc8936.html#name-polling-http-response)"
      summary: The JSON Web Key Set of the Event Transmitter.
      tags:
      - Transmitter
      x-accepts: application/json
      x-tags:
      - tag: Transmitter
  /poll:
    post:
      description: "[Spec](https://www.rfc-editor.org/rfc/rfc8936.html#name-polling-http-request)"
      operationId: poll_events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PollParameters'
        description: Optional request parameters
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: "[Spec](https://www.rfc-editor.org/rfc/rfc8936.html#name-polling-http-response)"
      security:
      - BearerAuth: []
      summary: Request for queued events to be returned.
      tags:
      - Transmitter
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: Transmitter
  /register:
    post:
      description: |-
        This endpoint is not part of the spec, but rather a quick-and-dirty way to allow a receiver to pass along its
        audience claim in exchange for a bearer token.
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterParameters'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
          description: "On successful creation of a stream, returns a bearer token\
            \ that will be used for subsequent requests."
      summary: Request the transmitter to setup a stream for a given receiver.
      tags:
      - OutOfBand
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: OutOfBand
  /trigger-event:
    post:
      description: "This endpoint is not part of the spec, but rather a quick-and-dirty\
        \ way to  test out sample security events other than verification."
      operationId: trigger_event
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerEventParameters'
        required: true
      responses:
        "200":
          description: "On successful creation of an event, it will be sent out as\
            \ per SSE spec (i.e. push or poll)."
      summary: Request the transmitter to create a SSE event of certain type and subject
        and send it to the (streams)receivers that care about the subject.
      tags:
      - OutOfBand
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: OutOfBand
components:
  parameters:
    issuer:
      description: |
        Using path components enables supporting multiple issuers per host.
        This is required in some multi-tenant hosting configurations.
        This use of .well-known is for supporting multiple issuers per host;
        unlike its use in [RFC5785](https://openid.net/specs/openid-sse-framework-1_0.html#RFC5785),
        it does not provide general information about the host.
      example: tenant-a
      explode: false
      in: path
      name: issuer
      required: true
      schema:
        type: string
      style: simple
    subject:
      description: |-
        OPTIONAL. The subject for which the stream status is requested.
        Content is a string-encoded json representation of a Subject
        (see Subject schema)
      explode: true
      in: query
      name: subject
      required: false
      schema:
        example: "{\"user\":{\"format\":\"email\",\"email\":\"reginold@popular-app.com\"\
          }}"
        type: string
      style: form
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Request body cannot be parsed or the request is otherwise invalid
    Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Authorization failed or is missing
    Forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: User not authorized to access resource
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Resource not found
    TooManyRequests:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Event Receiver is sending too many requests
  schemas:
    StreamStatus:
      example:
        subject:
          format: email
          email: reginold@popular-app.com
        status: disabled
      properties:
        status:
          description: |-
            REQUIRED. The status of the stream. Values can be one of:

            enabled:
              The Transmitter MUST transmit events over the stream,
              according to the stream’s configured delivery method.

            paused:
              The Transmitter MUST NOT transmit events over the stream.
              The transmitter will hold any events it would have transmitted while paused,
              and SHOULD transmit them when the stream’s status becomes enabled.
              If a Transmitter holds successive events that affect the same Subject Principal,
              then the Transmitter MUST make sure that those events are transmitted in
              the order of time that they were generated OR the Transmitter MUST send
              only the last events that do not require the previous events affecting
              the same Subject Principal to be processed by the Receiver,
              because the previous events are either cancelled by the later events or
              the previous events are outdated.

            disabled:
              The Transmitter MUST NOT transmit events over the stream,
              and will not hold any events for later transmission.
          example: disabled
          type: string
        subject:
          allOf:
          - $ref: '#/components/schemas/Subject'
          description: OPTIONAL. The Subject to which the status applies.
          example:
            format: email
            email: reginold@popular-app.com
      required:
      - status
      type: object
    TransmitterConfiguration:
      description: |
        Transmitters have metadata describing their configuration.
        [OpenID Spec](https://openid.net/specs/openid-sse-framework-1_0.html#discovery-meta)
      example:
        delivery_methods_supported:
        - https://schemas.openid.net/secevent/risc/delivery-method/push
        - https://schemas.openid.net/secevent/risc/delivery-method/poll
        configuration_endpoint: https://transmitter.most-secure.com/stream
        critical_subject_members:
        - tenant
        - user
        add_subject_endpoint: https://transmitter.most-secure.com/add-subject
        remove_subject_endpoint: https://transmitter.most-secure.com/remove-subject
        status_endpoint: https://transmitter.most-secure.com/status
        jwks_uri: https://transmitter.most-secure.com/jwks.json
        issuer: https://most-secure.com
        verification_endpoint: https://transmitter.most-secure.com/verification
      properties:
        issuer:
          description: |
            URL using the https scheme with no query or fragment component that the Transmitter asserts as its
            Issuer Identifier.
            This MUST be identical to the iss claim value in Security Event Tokens issued from this Transmitter.
          example: https://most-secure.com
          format: uri
          type: string
        jwks_uri:
          description: |
            URL of the Transmitter's [JSON Web Key Set](https://openid.net/specs/openid-sse-framework-1_0.html#RFC7517)
            document. This contains the signing key(s) the Receiver uses to validate signatures from the Transmitter.
          example: https://transmitter.most-secure.com/jwks.json
          format: uri
          type: string
        delivery_methods_supported:
          description: List of supported delivery method URIs. Recommended.
          example:
          - https://schemas.openid.net/secevent/risc/delivery-method/push
          - https://schemas.openid.net/secevent/risc/delivery-method/poll
          items:
            format: uri
            type: string
          type: array
        configuration_endpoint:
          description: The URL of the Configuration Endpoint.
          example: https://transmitter.most-secure.com/stream
          format: uri
          type: string
        status_endpoint:
          description: The URL of the Status Endpoint.
          example: https://transmitter.most-secure.com/status
          format: uri
          type: string
        add_subject_endpoint:
          description: The URL of the Add Subject Endpoint.
          example: https://transmitter.most-secure.com/add-subject
          format: uri
          type: string
        remove_subject_endpoint:
          description: The URL of the Remove Subject Endpoint.
          example: https://transmitter.most-secure.com/remove-subject
          format: uri
          type: string
        verification_endpoint:
          description: The URL of the Verification Endpoint.
          example: https://transmitter.most-secure.com/verification
          format: uri
          type: string
        critical_subject_members:
          description: |
            List of member names in a Complex Subject which, if present in a Subject Member in an event,
            MUST be interpreted by a Receiver.
          example:
          - tenant
          - user
          items:
            type: string
          type: array
      required:
      - issuer
      - jwks_uri
      title: Transmitter Configuration Response
      type: object
    StreamConfiguration:
      description: |
        JSON Object describing and Event Stream's configuration
        [Spec](https://openid.net/specs/openid-sse-framework-1_0.html#stream-config)"
      example:
        aud: https://popular-app.com
        delivery:
          method: https://schemas.openid.net/secevent/risc/delivery-method/poll
          endpoint_url: null
        events_supported:
        - https://schemas.openid.net/secevent/caep/event-type/session-revoked
        - https://schemas.openid.net/secevent/risc/event-type/credential-compromise
        iss: https://most-secure.com
        format: format
        events_delivered:
        - https://schemas.openid.net/secevent/risc/event-type/credential-compromise
        events_requested:
        - https://schemas.openid.net/secevent/risc/event-type/credential-compromise
        min_verification_interval: 0
      properties:
        iss:
          description: |-
            Read-Only.
            A URL using the https scheme with no query or fragment component that the Transmitter asserts as its Issuer
            Identifier. This MUST be identical to the iss Claim value in Security Event Tokens issued from this Transmitter.
          example: https://most-secure.com
          format: uri
          type: string
        aud:
          $ref: '#/components/schemas/StreamConfiguration_aud'
        events_supported:
          description: |-
            Read-Only.
            An array of URIs identifying the set of events supported by the Transmitter for this Receiver.
            If omitted, Event Transmitters SHOULD make this set available to the Event Receiver via some other means
            (e.g. publishing it in online documentation).
          example:
          - https://schemas.openid.net/secevent/caep/event-type/session-revoked
          - https://schemas.openid.net/secevent/risc/event-type/credential-compromise
          items:
            format: uri
            type: string
          type: array
        events_requested:
          description: |-
            Read-Write.
            An array of URIs identifying the set of events that the Receiver requested.
            A Receiver SHOULD request only the events that it understands and it can act on.
            This is configurable by the Receiver.
          example:
          - https://schemas.openid.net/secevent/risc/event-type/credential-compromise
          items:
            format: uri
            type: string
          type: array
        events_delivered:
          description: |-
            Read-Only.
            An array of URIs which is the intersection of events_supported and events_requested.
            These events MAY be delivered over the Event Stream.
          example:
          - https://schemas.openid.net/secevent/risc/event-type/credential-compromise
          items:
            format: uri
            type: string
          type: array
        delivery:
          $ref: '#/components/schemas/StreamConfiguration_delivery'
        min_verification_interval:
          description: |-
            Read-Only.
            An integer indicating the minimum amount of time in seconds that must pass in between verification requests.
            If an Event Receiver submits verification requests more frequently than this, the Event Transmitter MAY respond
            with a 429 status code. An Event Transmitter SHOULD NOT respond with a 429 status code if an Event Receiver is not
            exceeding this frequency.
          type: integer
        format:
          description: |-
            Read-Write.
            The Subject Identifier Format that the Receiver wants for the events.
            If not set then the Transmitter might decide to use a type that discloses more information than necessary.
          type: string
      required:
      - delivery
      - events_requested
      title: Event Stream Configuration
      type: object
    UpdateStreamStatus:
      allOf:
      - $ref: '#/components/schemas/StreamStatus'
      example:
        reason: Disabled by administrator action.
      properties:
        reason:
          description: OPTIONAL. A short text description that explains the reason
            for the change.
          example: Disabled by administrator action.
          type: string
      type: object
    PollDeliveryMethod:
      example:
        method: https://schemas.openid.net/secevent/risc/delivery-method/poll
        endpoint_url: https://transmitter.most-secure.com/poll
      properties:
        method:
          default: https://schemas.openid.net/secevent/risc/delivery-method/poll
          type: string
        endpoint_url:
          description: The URL where events can be retrieved from. This is specified
            by the Transmitter.
          format: uri
          nullable: true
          type: string
      required:
      - method
      type: object
    PushDeliveryMethod:
      example:
        method: https://schemas.openid.net/secevent/risc/delivery-method/push
        endpoint_url: https://receiver.example.com/push
      properties:
        method:
          default: https://schemas.openid.net/secevent/risc/delivery-method/push
          type: string
        endpoint_url:
          description: The URL where events are pushed through HTTP POST. This is
            set by the Receiver.
          format: uri
          type: string
        authorization_header:
          description: |-
            The HTTP Authorization header that the Transmitter MUST set with each event delivery,
            if the configuration is present. The value is optional and it is set by the Receiver.
          type: string
      required:
      - endpoint_url
      - method
      type: object
    RegisterResponse:
      example:
        token: 49e5e7785e4e4f688aa49e2585970370
      properties:
        token:
          description: The Bearer Token that the receiver will need to use for all
            Stream Management API calls that require authorization.
          type: string
      required:
      - token
      type: object
    TriggerEventParameters:
      description: "JSON Object describing request to create a security event to test\
        \ SSE receiver/transmitter \n"
      example:
        event_type: session-revoked
        subject:
          format: email
          email: user@example.com
      properties:
        event_type:
          description: "Supports all [RISC](https://openid.net/specs/openid-risc-profile-specification-1_0-01.html)\
            \ and [CAEP](https://openid.net/specs/openid-caep-specification-1_0-ID1.html)\
            \ event types."
          example: credential-compromise
          type: string
        subject:
          $ref: '#/components/schemas/TriggerEventParameters_subject'
      required:
      - event_type
      - subject
      title: Trigger Event Parameters
      type: object
    AddSubjectParameters:
      example:
        subject:
          format: email
          email: reginold@popular-app.com
        verified: true
      properties:
        subject:
          $ref: '#/components/schemas/AddSubjectParameters_subject'
        verified:
          description: |-
            OPTIONAL. A boolean value; when true, it indicates that the Event Receiver has verified the Subject claim.
            When false, it indicates that the Event Receiver has not verified the Subject claim.
            If omitted, Event Transmitters SHOULD assume that the subject has been verified.
          type: boolean
      required:
      - subject
      type: object
    PollParameters:
      example:
        maxEvents: 0
        acks:
        - acks
        - acks
        returnImmediately: true
      properties:
        maxEvents:
          description: |-
            An OPTIONAL integer value indicating the maximum number of unacknowledged SETs to be returned.
            The SET Transmitter SHOULD NOT send more SETs than the specified maximum.
            If more than the maximum number of SETs are available, the SET Transmitter determines which to return first;
            the oldest SETs available MAY be returned first, or another selection algorithm MAY be used,
            such as prioritizing SETs in some manner that makes sense for the use case.
            A value of 0 MAY be used by SET Recipients that would like to perform an acknowledge-only request.
            This enables the Recipient to use separate HTTP requests for acknowledgement and reception of SETs.
            If this parameter is omitted, no limit is placed on the number of SETs to be returned.
          type: integer
        returnImmediately:
          description: |-
            An OPTIONAL JSON boolean value that indicates the SET Transmitter SHOULD return an immediate response even if no
            results are available (short polling). The default value is false, which indicates the request is to be treated
            as an HTTP long poll, per [Section 2](https://www.rfc-editor.org/rfc/rfc6202#section-2) of
            [RFC6202](https://www.rfc-editor.org/rfc/rfc8936.html#RFC6202).
            The timeout for the request is part of the configuration between the participants, which is out of scope of this specification.
          type: boolean
        acks:
          description: List of event JTIs that the receiver is acknowledging. The
            Transmitter can stop keeping track of these.
          items:
            type: string
          type: array
      type: object
    RegisterParameters:
      example:
        audience: https://popular-app.com
      properties:
        audience:
          description: The audience claim to be used for all events on this stream.
          example: https://popular-app.com
          format: uri
          type: string
      type: object
    RemoveSubjectParameters:
      example:
        subject:
          format: email
          email: reginold@popular-app.com
      properties:
        subject:
          $ref: '#/components/schemas/RemoveSubjectParameters_subject'
      required:
      - subject
      type: object
    VerificationParameters:
      example:
        state: state
      properties:
        state:
          description: |
            OPTIONAL. An arbitrary string that the Event Transmitter
            MUST echo back to the Event Receiver in the verification
            event’s payload. Event Receivers MAY use the value of this
            parameter to correlate a verification event with a
            verification request. If the verification event is
            initiated by the transmitter then this parameter MUST not
            be set.
          type: string
      type: object
    Account:
      description: |-
        [Spec](https://datatracker.ietf.org/doc/html/draft-ietf-secevent-subject-identifiers#section-3.2.1)

        The Account Identifier Format identifies a subject using an account
        at a service provider, identified with an "acct" URI as defined in
        [RFC7565](https://datatracker.ietf.org/doc/html/rfc7565).
        Subject Identifiers in this format MUST contain a "uri"
        member whose value is the "acct" URI for the subject.  The "uri"
        member is REQUIRED and MUST NOT be null or empty.  The Account
        Identifier Format is identified by the name "account".
      properties:
        format:
          default: account
          title: Format
          type: string
        uri:
          example: acct:reginold@popular-app.com
          pattern: "^acct:[^\\s]+$"
          title: Uri
          type: string
      required:
      - format
      - uri
      title: Account
      type: object
    DID:
      description: |-
        [Spec](https://datatracker.ietf.org/doc/html/draft-ietf-secevent-subject-identifiers#section-3.2.3)

        The Decentralized Identifier Format identifies a subject using a
        Decentralized Identifier (DID) URL as defined in [DID](https://www.w3.org/TR/did-core/).
        Subject Identifiers in this format MUST contain a "url" member whose value is
        a DID URL for the DID Subject being identified.  The value of the
        "url" member MUST be a valid DID URL and MAY be a bare DID.  The
        "url" member is REQUIRED and MUST NOT be null or empty.  The
        Decentralized Identifier Format is identified by the name "did".
      properties:
        format:
          default: did
          title: Format
          type: string
        url:
          example: did:example:123456/did/url/path?versionId=1
          pattern: "^did:[^\\s]+$"
          title: Url
          type: string
      required:
      - format
      - url
      title: DID
      type: object
    Email:
      description: |-
        [Spec](https://datatracker.ietf.org/doc/html/draft-ietf-secevent-subject-identifiers#section-3.2.4)

        The Email Identifier Format identifies a subject using an email
        address.  Subject Identifiers in this format MUST contain an "email"
        member whose value is a string containing the email address of the
        subject, formatted as an "addr-spec" as defined in Section 3.4.1 of
        [RFC5322](https://datatracker.ietf.org/doc/html/rfc5322).
        The "email" member is REQUIRED and MUST NOT be null or
        empty.  The value of the "email" member SHOULD identify a mailbox to
        which email may be delivered, in accordance with [RFC5321](https://datatracker.ietf.org/doc/html/rfc5321).
        The Email Identifier Format is identified by the name "email".
      properties:
        format:
          default: email
          title: Format
          type: string
        email:
          example: reginold@popular-app.com
          pattern: "(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"\
            (?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\\
            [\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\
            .)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\\
            .){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\\
            x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\\
            x0b\\x0c\\x0e-\\x7f])+)\\])"
          title: Email
          type: string
      required:
      - email
      - format
      title: Email
      type: object
    IssSub:
      description: |-
        [Spec](https://datatracker.ietf.org/doc/html/draft-ietf-secevent-subject-identifiers#section-3.2.5)

        The Issuer and Subject Identifier Format identifies a subject using a
        pair of "iss" and "sub" members, analagous to how subjects are
        identified using the "iss" and "sub" claims in OpenID Connect
        [OpenID.Core](http://openid.net/specs/openid-connect-core-1_0.html) ID Tokens.
        These members MUST follow the formats of the "iss" member and "sub" member
        defined by [RFC7519](https://datatracker.ietf.org/doc/html/rfc7519), respectively.
        Both the "iss" member and the "sub" member are REQUIRED and MUST NOT
        be null or empty.  The Issuer and Subject Identifier Format is
        identified by the name "iss_sub".
      properties:
        format:
          default: iss_sub
          title: Format
          type: string
        iss:
          example: https://most-secure.com
          title: iss
          type: string
        sub:
          example: "145234573"
          title: sub
          type: string
      required:
      - format
      - iss
      - sub
      title: IssSub
      type: object
    JwtID:
      description: |-
        [Spec](https://openid.net/specs/openid-sse-framework-1_0.html#rfc.section.3.4.1)

        The "JWT ID" Subject Identifier Format specifies a JSON Web Token (JWT)
        identifier, defined in [RFC7519](https://datatracker.ietf.org/doc/html/rfc7519).
      properties:
        format:
          default: jwt_id
          title: Format
          type: string
        iss:
          description: |-
            The "iss" (issuer) claim of the JWT being identified, defined in
            [RFC7519](https://datatracker.ietf.org/doc/html/rfc7519)
          example: https://most-secure.com
          title: iss
          type: string
        jti:
          description: |-
            The "jti" (JWT token ID) claim of the JWT being identified, defined in
            [RFC7519](https://datatracker.ietf.org/doc/html/rfc7519)
          example: B70BA622-9515-4353-A866-823539EECBC8
          title: jti
          type: string
      required:
      - format
      - iss
      - jti
      title: JwtID
      type: object
    Opaque:
      description: |-
        [Spec](https://datatracker.ietf.org/doc/html/draft-ietf-secevent-subject-identifiers#section-3.2.6)

        The Opaque Identifier Format describes a subject that is identified
        with a string with no semantics asserted beyond its usage as an
        identifier for the subject, such as a UUID or hash used as a
        surrogate identifier for a record in a database.  Subject Identifiers
        in this format MUST contain an "id" member whose value is a JSON
        string containing the opaque string identifier for the subject.  The
        "id" member is REQUIRED and MUST NOT be null or empty.  The Opaque
        Identifier Format is identified by the name "opaque".
      properties:
        format:
          default: opaque
          title: Format
          type: string
        id:
          example: "11112222333344445555"
          title: Id
          type: string
      required:
      - format
      - id
      title: Opaque
      type: object
    PhoneNumber:
      description: |-
        [Spec](https://datatracker.ietf.org/doc/html/draft-ietf-secevent-subject-identifiers#section-3.2.7)

        The Phone Number Identifier Format identifies a subject using a
        telephone number.  Subject Identifiers in this format MUST contain a
        "phone_number" member whose value is a string containing the full
        telephone number of the subject, including international dialing
        prefix, formatted according to E.164
        [E164](https://datatracker.ietf.org/doc/html/draft-ietf-secevent-subject-identifiers#ref-E164).
        The "phone_number" member is REQUIRED and MUST NOT be null or empty.
        The Phone Number Identifier Format is identified by the name "phone_number".
      properties:
        format:
          default: phone_number
          title: Format
          type: string
        phone_number:
          example: "+12065550100"
          title: Phone Number
          type: string
      required:
      - format
      - phone_number
      title: PhoneNumber
      type: object
    SamlAssertionID:
      description: |-
        [Spec](https://openid.net/specs/openid-sse-framework-1_0.html#rfc.section.3.4.2)

        The "SAML Assertion ID" Subject Identifier Format specifies a SAML 2.0
        [OASIS.saml-core-2.0-os](https://openid.net/specs/openid-sse-framework-1_0.html#OASIS.saml-core-2.0-os)
        assertion identifier.
      properties:
        format:
          default: saml_assertion_id
          title: Format
          type: string
        issuer:
          description: |-
            The "Issuer" value of the SAML assertion being identified, defined in
            [OASIS.saml-core-2.0-os](https://openid.net/specs/openid-sse-framework-1_0.html#OASIS.saml-core-2.0-os)
          example: https://most-secure.com
          title: Issuer
          type: string
        assertion_id:
          description: |-
            The "ID" value of the SAML assertion being identified, defined in
            [OASIS.saml-core-2.0-os](https://openid.net/specs/openid-sse-framework-1_0.html#OASIS.saml-core-2.0-os)
          example: _8e8dc5f69a98cc4c1ff3427e5ce34606fd672f91e6
          title: Assertion ID
          type: string
      required:
      - assertion_id
      - format
      - issuer
      title: SamlAssertionID
      type: object
    SimpleSubject:
      discriminator:
        propertyName: format
      oneOf:
      - $ref: '#/components/schemas/Account'
      - $ref: '#/components/schemas/DID'
      - $ref: '#/components/schemas/Email'
      - $ref: '#/components/schemas/IssSub'
      - $ref: '#/components/schemas/JwtID'
      - $ref: '#/components/schemas/Opaque'
      - $ref: '#/components/schemas/PhoneNumber'
      - $ref: '#/components/schemas/SamlAssertionID'
      title: Simple Subject
      x-one-of-name: SimpleSubject
    Aliases:
      description: |-
        [Spec](https://datatracker.ietf.org/doc/html/draft-ietf-secevent-subject-identifiers#section-3.2.2)

        The Aliases Identifier Format describes a subject that is identified
        with a list of different Subject Identifiers.  It is intended for use
        when a variety of identifiers have been shared with the party that
        will be interpreting the Subject Identifier, and it is unknown which
        of those identifiers they will recognize or support.  Subject
        Identifiers in this format MUST contain an "identifiers" member whose
        value is a JSON array containing one or more Subject Identifiers.
        Each Subject Identifier in the array MUST identify the same entity.
        The "identifiers" member is REQUIRED and MUST NOT be null or empty.
        It MAY contain multiple instances of the same Identifier Format
        (e.g., multiple Email Subject Identifiers), but SHOULD NOT contain
        exact duplicates.  This format is identified by the name "aliases".

        "alias" Subject Identifiers MUST NOT be nested; i.e., the
        "identifiers" member of an "alias" Subject Identifier MUST NOT
        contain a Subject Identifier in the "aliases" format.'
      properties:
        format:
          default: aliases
          title: Format
          type: string
        identifiers:
          items:
            $ref: '#/components/schemas/SimpleSubject'
          minItems: 1
          type: array
      required:
      - format
      - identifiers
      title: Aliases
      type: object
    ComplexSubject:
      additionalProperties: false
      description: |-
        [Spec](https://openid.net/specs/openid-sse-framework-1_0.html#rfc.section.3.2)

        A Complex Subject Member has a name and a value that is a JSON object that
        has one or more Simple Subject Members. All members within a Complex Subject
        MUST represent attributes of the same Subject Principal.
        As a whole, the Complex Subject MUST refer to exactly one Subject Principal.
      minProperties: 1
      properties:
        application:
          $ref: '#/components/schemas/ComplexSubject_application'
        device:
          $ref: '#/components/schemas/ComplexSubject_device'
        group:
          $ref: '#/components/schemas/ComplexSubject_group'
        org_unit:
          $ref: '#/components/schemas/ComplexSubject_org_unit'
        session:
          $ref: '#/components/schemas/ComplexSubject_session'
        tenant:
          $ref: '#/components/schemas/ComplexSubject_tenant'
        user:
          $ref: '#/components/schemas/ComplexSubject_user'
      title: ComplexSubject
      type: object
    Subject:
      description: |-
        [Spec](https://datatracker.ietf.org/doc/html/draft-ietf-secevent-subject-identifiers#section-3)

        As described in Section 1.2 of SET [RFC8417](https://datatracker.ietf.org/doc/html/rfc8417),
        subjects related to security events may take a variety of forms,
        including but not limited to a JWT [RFC7519](https://datatracker.ietf.org/doc/html/rfc7519)
        principal, an IP address, a URL, etc. Different types of subjects may need
        to be identified in different ways. (e.g., a host might be identified by an
        IP or MAC address, while a user might be identified by an email address)
        Furthermore, even in the case where the type of the subject is known,
        there may be multiple ways by which a given subject may be identified.
        For example, an account may be identified by an opaque identifier, an
        email address, a phone number, a JWT "iss" claim and "sub" claim,
        etc., depending on the nature and needs of the transmitter and
        receiver.  Even within the context of a given transmitter and
        receiver relationship, it may be appropriate to identify different
        accounts in different ways, for example if some accounts only have
        email addresses associated with them while others only have phone
        numbers.  Therefore it can be necessary to indicate within a SET the
        mechanism by which a subject is being identified.

        To address this problem, this specification defines Subject
        Identifiers - JSON [RFC7519](https://datatracker.ietf.org/doc/html/rfc7519)
        objects containing information identifying a subject - and Identifier Formats -
        named sets of rules describing how to encode different kinds of subject
        identifying information (e.g., an email address, or an issuer and subject pair)
        as a Subject Identifier.
      discriminator:
        propertyName: format
      oneOf:
      - $ref: '#/components/schemas/SimpleSubject'
      - $ref: '#/components/schemas/Aliases'
      - $ref: '#/components/schemas/ComplexSubject'
      type: object
      x-one-of-name: Subject
    Error:
      properties:
        code:
          type: string
        message:
          type: string
      required:
      - code
      - message
      type: object
    StreamConfiguration_aud:
      description: |-
        Read-Only.
        A string or an array of strings containing an audience claim as defined in
        [JSON Web Token (JWT)](https://openid.net/specs/openid-sse-framework-1_0.html#RFC7519) that identifies
        the Event Receiver(s) for the Event Stream. This property cannot be updated. If multiple Receivers are specified
        then the Transmitter SHOULD know that these Receivers are the same entity.
      example: https://popular-app.com
      oneOf:
      - format: uri
        type: string
      - items:
          format: uri
          type: string
        type: array
      x-one-of-name: StreamConfigurationAud
    StreamConfiguration_delivery:
      description: |-
        Read-Write.
        A JSON object containing a set of name/value pairs specifying configuration parameters for the SET delivery
        method. The actual delivery method is identified by the special key method with the value being a URI as defined
        in [Section 11.2.1](https://openid.net/specs/openid-sse-framework-1_0.html#delivery-meta).
      discriminator:
        propertyName: method
      example:
        method: https://schemas.openid.net/secevent/risc/delivery-method/poll
        endpoint_url: null
      oneOf:
      - $ref: '#/components/schemas/PushDeliveryMethod'
      - $ref: '#/components/schemas/PollDeliveryMethod'
      x-one-of-name: StreamConfigurationDelivery
    TriggerEventParameters_subject:
      allOf:
      - $ref: '#/components/schemas/Subject'
      - description: |
          REQUIRED. ONLY EMAIL format supported currently.
          SHOULD be same as subjects receiver cares about.
          A Subject claim identifying the subject of the event to be generated.
    AddSubjectParameters_subject:
      allOf:
      - $ref: '#/components/schemas/Subject'
      - description: REQUIRED. A Subject claim identifying the subject to be added.
    RemoveSubjectParameters_subject:
      allOf:
      - $ref: '#/components/schemas/Subject'
      - description: REQUIRED. A Subject claim identifying the subject to be removed.
    ComplexSubject_application:
      allOf:
      - $ref: '#/components/schemas/SimpleSubject'
      - description: A Subject Identifier that identifies an application.
    ComplexSubject_device:
      allOf:
      - $ref: '#/components/schemas/SimpleSubject'
      - description: A Subject Identifier that identifies a device.
    ComplexSubject_group:
      allOf:
      - $ref: '#/components/schemas/SimpleSubject'
      - description: A Subject Identifier that identifies a group.
    ComplexSubject_org_unit:
      allOf:
      - $ref: '#/components/schemas/SimpleSubject'
      - description: A Subject Identifier that identifies an organizational unit.
    ComplexSubject_session:
      allOf:
      - $ref: '#/components/schemas/SimpleSubject'
      - description: A Subject Identifier that identifies a session.
    ComplexSubject_tenant:
      allOf:
      - $ref: '#/components/schemas/SimpleSubject'
      - description: A Subject Identifier that identifies a tenant.
    ComplexSubject_user:
      allOf:
      - $ref: '#/components/schemas/SimpleSubject'
      - description: A Subject Identifier that identifies a user.
  securitySchemes:
    BearerAuth:
      scheme: bearer
      type: http
