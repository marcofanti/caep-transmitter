/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Error;
import org.openapitools.model.StreamConfiguration;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-15T16:42:52.857708-05:00[America/New_York]")
@Validated
@Tag(name = "StreamManagement", description = "[Spec](https://openid.net/specs/openid-sse-framework-1_0.html#management) Stream Management endpoints provided by an Event Transmitter so that Event Transmitters may configure Event Streams.")
public interface StreamApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /stream : Request to remove the configuration of an event stream
     * An Event Receiver removes the configuration of a stream by making an HTTP DELETE request to the Configuration Endpoint. On receiving a request the Event Transmitter responds with a 200 OK response if the configuration was successfully removed.
     *
     * @return On receiving a request the Event Transmitter responds with a 200 OK response if the configuration was successfully removed. (status code 200)
     *         or Authorization failed or is missing (status code 401)
     *         or The Event Receiver is not allowed to update the stream configuration. (status code 403)
     */
    @Operation(
        operationId = "streamDelete",
        summary = "Request to remove the configuration of an event stream",
        description = "An Event Receiver removes the configuration of a stream by making an HTTP DELETE request to the Configuration Endpoint. On receiving a request the Event Transmitter responds with a 200 OK response if the configuration was successfully removed.",
        tags = { "StreamManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "On receiving a request the Event Transmitter responds with a 200 OK response if the configuration was successfully removed."),
            @ApiResponse(responseCode = "401", description = "Authorization failed or is missing", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "The Event Receiver is not allowed to update the stream configuration.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/stream",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> streamDelete(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /stream : Request to retrieve the configuration of an event stream
     * [Spec](https://openid.net/specs/openid-sse-framework-1_0.html#reading-a-streams-configuration)  An Event Receiver gets the current configuration of a stream by making an HTTP GET request to the Configuration Endpoint. On receiving a valid request the Event Transmitter responds with a 200 OK response containing a JSON representation of the stream’s configuration in the body.
     *
     * @return The Event Stream&#39;s configuration (status code 200)
     *         or Request body cannot be parsed or the request is otherwise invalid (status code 401)
     *         or The Event Receiver is not allowed to read the stream configuration. (status code 403)
     *         or There is no Event Stream configured for this Event Receiver. (status code 404)
     */
    @Operation(
        operationId = "streamGet",
        summary = "Request to retrieve the configuration of an event stream",
        description = "[Spec](https://openid.net/specs/openid-sse-framework-1_0.html#reading-a-streams-configuration)  An Event Receiver gets the current configuration of a stream by making an HTTP GET request to the Configuration Endpoint. On receiving a valid request the Event Transmitter responds with a 200 OK response containing a JSON representation of the stream’s configuration in the body.",
        tags = { "StreamManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The Event Stream's configuration", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StreamConfiguration.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request body cannot be parsed or the request is otherwise invalid", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "The Event Receiver is not allowed to read the stream configuration.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "There is no Event Stream configured for this Event Receiver.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/stream",
        produces = { "application/json" }
    )
    
    default ResponseEntity<StreamConfiguration> streamGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"aud\" : \"https://popular-app.com\", \"delivery\" : { \"method\" : \"https://schemas.openid.net/secevent/risc/delivery-method/poll\", \"endpoint_url\" : null }, \"events_supported\" : [ \"https://schemas.openid.net/secevent/caep/event-type/session-revoked\", \"https://schemas.openid.net/secevent/risc/event-type/credential-compromise\" ], \"iss\" : \"https://most-secure.com\", \"format\" : \"format\", \"events_delivered\" : [ \"https://schemas.openid.net/secevent/risc/event-type/credential-compromise\" ], \"events_requested\" : [ \"https://schemas.openid.net/secevent/risc/event-type/credential-compromise\" ], \"min_verification_interval\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /stream : Request to update the configuration of an event stream
     * [Spec](https://openid.net/specs/openid-sse-framework-1_0.html#updating-a-streams-configuration)  An Event Receiver updates the current configuration of a stream by making an HTTP POST request to the Configuration Endpoint. The POST body contains a JSON representation of the updated configuration. On receiving a valid request the Event Transmitter responds with a 200 OK response containing a JSON representation of the updated stream configuration in the body.  The full set of editable properties must be present in the POST body, not only the ones that are specifically intended to be changed. Missing properties SHOULD be interpreted as requested to be deleted. Event Receivers should read the configuration first, modify the JSON representation, then make an update request.  Properties that cannot be updated MAY be present, but they MUST match the expected value.
     *
     * @param streamConfiguration Request parameters (required)
     * @return The Event Stream&#39;s updated configuration (status code 200)
     *         or The update request has been accepted, but not processed. Receiver MAY try the same request later in order to get processing result.  If a Receiver makes a request to update the stream to enable it for a specific Subject, and the Transmitter is unable to decide whether or not to complete the request, then the Transmitter MUST respond with a 202 status code. (status code 202)
     *         or Request body cannot be parsed or the request is otherwise invalid (status code 400)
     *         or Authorization failed or is missing (status code 401)
     *         or The Event Receiver is not allowed to update the stream configuration. (status code 403)
     *         or There is no Event Stream configured for this Event Receiver. (status code 404)
     */
    @Operation(
        operationId = "streamPost",
        summary = "Request to update the configuration of an event stream",
        description = "[Spec](https://openid.net/specs/openid-sse-framework-1_0.html#updating-a-streams-configuration)  An Event Receiver updates the current configuration of a stream by making an HTTP POST request to the Configuration Endpoint. The POST body contains a JSON representation of the updated configuration. On receiving a valid request the Event Transmitter responds with a 200 OK response containing a JSON representation of the updated stream configuration in the body.  The full set of editable properties must be present in the POST body, not only the ones that are specifically intended to be changed. Missing properties SHOULD be interpreted as requested to be deleted. Event Receivers should read the configuration first, modify the JSON representation, then make an update request.  Properties that cannot be updated MAY be present, but they MUST match the expected value.",
        tags = { "StreamManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The Event Stream's updated configuration", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StreamConfiguration.class))
            }),
            @ApiResponse(responseCode = "202", description = "The update request has been accepted, but not processed. Receiver MAY try the same request later in order to get processing result.  If a Receiver makes a request to update the stream to enable it for a specific Subject, and the Transmitter is unable to decide whether or not to complete the request, then the Transmitter MUST respond with a 202 status code.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "400", description = "Request body cannot be parsed or the request is otherwise invalid", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authorization failed or is missing", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "The Event Receiver is not allowed to update the stream configuration.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "There is no Event Stream configured for this Event Receiver.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/stream",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<StreamConfiguration> streamPost(
        @Parameter(name = "StreamConfiguration", description = "Request parameters", required = true) @Valid @RequestBody StreamConfiguration streamConfiguration
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"aud\" : \"https://popular-app.com\", \"delivery\" : { \"method\" : \"https://schemas.openid.net/secevent/risc/delivery-method/poll\", \"endpoint_url\" : null }, \"events_supported\" : [ \"https://schemas.openid.net/secevent/caep/event-type/session-revoked\", \"https://schemas.openid.net/secevent/risc/event-type/credential-compromise\" ], \"iss\" : \"https://most-secure.com\", \"format\" : \"format\", \"events_delivered\" : [ \"https://schemas.openid.net/secevent/risc/event-type/credential-compromise\" ], \"events_requested\" : [ \"https://schemas.openid.net/secevent/risc/event-type/credential-compromise\" ], \"min_verification_interval\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
