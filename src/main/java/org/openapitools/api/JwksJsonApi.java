/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-15T16:42:52.857708-05:00[America/New_York]")
@Validated
@Tag(name = "Transmitter", description = "Additional endpoints provided by an Event Transmitter. These are not needed during Stream Managment, but are used by Event Receivers for event processing.")
public interface JwksJsonApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /jwks.json : The JSON Web Key Set of the Event Transmitter.
     * [Spec](https://datatracker.ietf.org/doc/html/rfc7517)
     *
     * @return [Spec](https://www.rfc-editor.org/rfc/rfc8936.html#name-polling-http-response) (status code 200)
     */
    @Operation(
        operationId = "jwksJson",
        summary = "The JSON Web Key Set of the Event Transmitter.",
        description = "[Spec](https://datatracker.ietf.org/doc/html/rfc7517)",
        tags = { "Transmitter" },
        responses = {
            @ApiResponse(responseCode = "200", description = "[Spec](https://www.rfc-editor.org/rfc/rfc8936.html#name-polling-http-response)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/jwks.json",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> jwksJson(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"keys\" : [ { \"alg\" : \"ES256\", \"crv\" : \"P-256\", \"kid\" : \"transmitter-ES256-001\", \"kty\" : \"EC\", \"x\" : \"Js-Hzhls17UL1JI2EL0AB6Ta2B282me2niBGc0s1-Lo\", \"y\" : \"PCsSWYCixwZgEyYKbGDFpzaooP6_Z-4CEfV62cbNBQw\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
