/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Error;
import org.openapitools.model.StreamStatus;
import org.openapitools.model.UpdateStreamStatus;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-15T16:42:52.857708-05:00[America/New_York]")
@Validated
@Tag(name = "StreamManagement", description = "[Spec](https://openid.net/specs/openid-sse-framework-1_0.html#management) Stream Management endpoints provided by an Event Transmitter so that Event Transmitters may configure Event Streams.")
public interface StatusApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /status : Request to get the status of an Event Stream
     * [Spec](https://openid.net/specs/openid-sse-framework-1_0.html#reading-a-streams-status)  An Event Receiver checks the current status of an event stream by making an HTTP GET request to the stream’s Status Endpoint.
     *
     * @param subject OPTIONAL. The subject for which the stream status is requested. Content is a string-encoded json representation of a Subject (see Subject schema) (optional)
     * @return On receiving a valid request the Event Transmitter responds with a 200 OK response containing a JSON object with an attribute status (status code 200)
     *         or Authorization failed or is missing (status code 401)
     *         or The Event Receiver is not allowed to read this stream&#39;s status. (status code 403)
     *         or There is no Event Stream configured for this Event Receiver, or the Subject specified is invalid or the Receiver is not authorized to get status for the specified Subject. (status code 404)
     */
    @Operation(
        operationId = "getStatus",
        summary = "Request to get the status of an Event Stream",
        description = "[Spec](https://openid.net/specs/openid-sse-framework-1_0.html#reading-a-streams-status)  An Event Receiver checks the current status of an event stream by making an HTTP GET request to the stream’s Status Endpoint.",
        tags = { "StreamManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "On receiving a valid request the Event Transmitter responds with a 200 OK response containing a JSON object with an attribute status", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StreamStatus.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authorization failed or is missing", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "The Event Receiver is not allowed to read this stream's status.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "There is no Event Stream configured for this Event Receiver, or the Subject specified is invalid or the Receiver is not authorized to get status for the specified Subject.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/status",
        produces = { "application/json" }
    )
    
    default ResponseEntity<StreamStatus> getStatus(
        @Parameter(name = "subject", description = "OPTIONAL. The subject for which the stream status is requested. Content is a string-encoded json representation of a Subject (see Subject schema)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subject", required = false) String subject
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"subject\" : { \"format\" : \"email\", \"email\" : \"reginold@popular-app.com\" }, \"status\" : \"disabled\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /status : Request to update an Event Stream&#39;s status
     * [Spec](https://openid.net/specs/openid-sse-framework-1_0-ID1.html#updating-a-streams-status)  An Event Receiver updates the current status of a stream by making an HTTP POST request to the Status Endpoint.
     *
     * @param updateStreamStatus Request parameters (required)
     * @return Event Stream status successfully updated (status code 200)
     *         or The update request has been accepted, but not processed. Receiver MAY try the same request later in order to get processing result. (status code 202)
     *         or Request body cannot be parsed or the request is otherwise invalid (status code 400)
     *         or Authorization failed or is missing (status code 401)
     *         or The Event Receiver is not allowed to update the stream status. (status code 403)
     *         or There is no Event Stream configured for this Event Receiver, or an invalid Subject is specified. (status code 404)
     */
    @Operation(
        operationId = "updateStatus",
        summary = "Request to update an Event Stream's status",
        description = "[Spec](https://openid.net/specs/openid-sse-framework-1_0-ID1.html#updating-a-streams-status)  An Event Receiver updates the current status of a stream by making an HTTP POST request to the Status Endpoint.",
        tags = { "StreamManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Event Stream status successfully updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateStreamStatus.class))
            }),
            @ApiResponse(responseCode = "202", description = "The update request has been accepted, but not processed. Receiver MAY try the same request later in order to get processing result."),
            @ApiResponse(responseCode = "400", description = "Request body cannot be parsed or the request is otherwise invalid", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authorization failed or is missing", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "The Event Receiver is not allowed to update the stream status.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "There is no Event Stream configured for this Event Receiver, or an invalid Subject is specified.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/status",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UpdateStreamStatus> updateStatus(
        @Parameter(name = "UpdateStreamStatus", description = "Request parameters", required = true) @Valid @RequestBody UpdateStreamStatus updateStreamStatus
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"reason\" : \"Disabled by administrator action.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
