/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AddSubjectParameters;
import org.openapitools.model.Error;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-15T16:42:52.857708-05:00[America/New_York]")
@Validated
@Tag(name = "StreamManagement", description = "[Spec](https://openid.net/specs/openid-sse-framework-1_0.html#management) Stream Management endpoints provided by an Event Transmitter so that Event Transmitters may configure Event Streams.")
public interface AddSubjectApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /add-subject : Request to add a subject to an Event Stream
     * [Spec](https://openid.net/specs/openid-sse-framework-1_0.html#adding-a-subject-to-a-stream)  Event Receivers can send requests to an Event Transmitter&#39;s Add Subject endpoint to add a subject to an Event Stream.
     *
     * @param addSubjectParameters Request parameters (required)
     * @return On a successful response, the Event Transmitter responds with an empty 200 OK response. The Event Transmitter MAY choose to silently ignore the request, for example if the subject has previously indicated to the transmitter that they do not want events to be transmitted to the Event Receiver. In this case, the transmitter MAY return an empty 200 OK response or an appropriate error code. See [Security Considerations](https://openid.net/specs/openid-sse-framework-1_0.html#management-sec). (status code 200)
     *         or Request body cannot be parsed or the request is otherwise invalid (status code 400)
     *         or Authorization failed or is missing (status code 401)
     *         or The Event Receiver is not allowed to add this particular subject, or not allowed to add in general. (status code 403)
     *         or The subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and respond with 200. (status code 404)
     *         or Event Receiver is sending too many requests (status code 429)
     */
    @Operation(
        operationId = "addSubject",
        summary = "Request to add a subject to an Event Stream",
        description = "[Spec](https://openid.net/specs/openid-sse-framework-1_0.html#adding-a-subject-to-a-stream)  Event Receivers can send requests to an Event Transmitter's Add Subject endpoint to add a subject to an Event Stream.",
        tags = { "StreamManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "On a successful response, the Event Transmitter responds with an empty 200 OK response. The Event Transmitter MAY choose to silently ignore the request, for example if the subject has previously indicated to the transmitter that they do not want events to be transmitted to the Event Receiver. In this case, the transmitter MAY return an empty 200 OK response or an appropriate error code. See [Security Considerations](https://openid.net/specs/openid-sse-framework-1_0.html#management-sec)."),
            @ApiResponse(responseCode = "400", description = "Request body cannot be parsed or the request is otherwise invalid", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authorization failed or is missing", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "The Event Receiver is not allowed to add this particular subject, or not allowed to add in general.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "The subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and respond with 200.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "429", description = "Event Receiver is sending too many requests", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/add-subject",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> addSubject(
        @Parameter(name = "AddSubjectParameters", description = "Request parameters", required = true) @Valid @RequestBody AddSubjectParameters addSubjectParameters
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
